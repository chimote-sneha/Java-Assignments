Private constuctor is legal or illegal ?

No, a private constructor is not illegal; in C++, Java, and other object-oriented languages, a private constructor is legal and serves specific purposes, such as implementing design patterns like Singleton, creating utility classes, or preventing direct instantiation of a class by restricting object creation to within the class itself or its friends. [1, 2, 3]  
Reasons to use a private constructor 

• Singleton Pattern: You can control object creation to ensure only one instance of the class is ever created.  
• Utility Classes: If a class only contains static methods and doesn't need to be instantiated, a private constructor prevents others from creating objects of that class.  
• Preventing Copying: In C++, you can make a class non-copyable by declaring the copy constructor and copy assignment operator as private.  
• Restricting Object Creation: It enforces strict control over the object lifecycle and state, ensuring objects are created only under specific, controlled conditions.   
• Delegating Constructors: In some cases, a private constructor can serve as an implementation detail, handling the core logic, and then being called by other public constructors. 

How it works 

• By making a constructor private, you restrict the ability to create instances of that class from outside the class definition. [2, 8]  
• Only methods within the same class, or "friend" classes in C++, can invoke a private constructor to create objects. [1, 5]  
• This restriction provides a way to manage and control the instantiation of objects, which is a fundamental concept in software design. [2]  


