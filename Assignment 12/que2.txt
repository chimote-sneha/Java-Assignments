What is class and object? Explain all oop features in java with example.


A class is a template to create objects having similar properties and behavior, or in other words, we can say that a class is a blueprint for objects.
An object is an instance of a class. For example, the animal type Dog is a class, while a particular dog named Tommy is an object of the Dog class.

Features of OOPs in java :-

1.Class
In object-oriented programming, a class is a blueprint from which individual objects are created (or, we can say a class is a data type of an object type). In Java, everything is related to classes and objects. Each class has its methods and attributes that can be accessed and manipulated through the objects.

Examples of Class
If you want to create a class for students. In that case, "Student" will be a class, and student records (like student1, student2, etc) will be objects

2.Object
In object-oriented programming, an object is an entity that has two characteristics (states and behavior). Some of the real-world objects are book, mobile, table, computer, etc. An object is a variable of the type class, it is a basic component of an object-oriented programming system. A class has the methods and data members (attributes), these methods and data members are accessed through an object. Thus, an object is an instance of a class.

Example of Objects
Continuing with the example of students, let's create some students as objects and print their details.

3.Inheritance
In object-oriented programming, inheritance is a process by which we can reuse the functionalities of existing classes to new classes. In the concept of inheritance, there are two terms base (parent) class and derived (child) class. When a class is inherited from another class (base class), it (derived class) obtains all the properties and behaviors of the base class.

Example of Inheritance
Continuing with the example of students, let's make student a derived class of person class. Person class will have a single field name and student class will inherit .

4.Polymorphism
The term "polymorphism" means "many forms". In object-oriented programming, polymorphism is useful when you want to create multiple forms with the same name of a single entity. To implement polymorphism in Java, we use two concepts method overloading and method overriding.
Example of Polymorphism
Continuing with the example of students, let's add another method printDetails() with additional parameter to modify the behavior of the method.

5.Abstraction
In object-oriented programming, an abstraction is a technique of hiding internal details and showing functionalities. The abstract classes and interfaces are used to achieve abstraction in Java.

The real-world example of an abstraction is a Car, the internal details such as the engine, process of starting a car, process of shifting gears, etc. are hidden from the user, and features such as the start button, gears, display, break, etc are given to the user. When we perform any action on these features, the internal process works.

Example of Abstraction
Let's create an Abstract Vehicle class and Car extending the Vehicle class. Vehicle will abstract away internal functionalities.

6.Encapsulation
In an object-oriented approach, encapsulation is a process of binding the data members (attributes) and methods together. The encapsulation restricts direct access to important data. The best example of the encapsulation concept is making a class where the data members are private and methods are public to access through an object. In this case, only methods can access those private data.

Example of Objects
Continuing with the example of students, let's create some students as objects and print their details.